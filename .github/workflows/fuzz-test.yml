# Name of the workflow as it will appear in the GitHub Actions dashboard
name: Fuzz Testing

# Trigger the workflow
on:
  # Trigger the workflow using a cron schedule
  schedule:
    # the workflow will run at 12:00 PM every Monday
    - cron: '0 12 * * 1'  

  # Run the workflow on pushes to the 'main' branch
  push:
    branches:
      - main

  # Run the workflow on pull requests targeting the 'main' branch
  pull_request:
    branches:
      - main
  
  # Allows manual triggering of the workflow
  workflow_dispatch: 

jobs:
  # Fuzz test job with 2 runners
  test-fuzz:  
    strategy:
      matrix:
        range:
          - {start: 0, end: 5} # First range for the first runner
          - {start: 5, end: 10} # Second range for the second runner
    runs-on: ubuntu-latest # Each matrix run gets its own runner

    steps:
    # Step 1: Check out the code from the repository
    - name: Checkout code
      uses: actions/checkout@v4  

    # Step 2: Set up Go environment
    - name: Set up Go
      uses: actions/setup-go@v4  
      with:
        go-version: '1.23.2'

    # Step 3: Run the fuzz tests and store the report inside 'reports/'
    - name: Run tests for range ${{ matrix.range.start }}-${{ matrix.range.end }}
      run: |
        mkdir -p reports  # Ensure the reports directory exists
        go test -v -run '^TestFuzzer$' -coverprofile=reports/cover-${{ matrix.range.start }}-to-${{ matrix.range.end }}.out -args -start=${{ matrix.range.start }} -end=${{ matrix.range.end }} > reports/report-${{ matrix.range.start }}-to-${{ matrix.range.end }}.txt

    # Step 4: Upload the report as an artifact
    - name: Upload Fuzz Test Report
      if: always()  # Ensure this step runs even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: test-report-${{ matrix.range.start }}-to-${{ matrix.range.end }}
        path: |
          reports/report-${{ matrix.range.start }}-to-${{ matrix.range.end }}.txt
          reports/cover-${{ matrix.range.start }}-to-${{ matrix.range.end }}.out

  # Separate job for the fixed input test
  test-fixed-input:
    runs-on: ubuntu-latest  # Run on a separate runner

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up the Go environment
      - name: Set up Go
        uses: actions/setup-go@v4  
        with:
          go-version: '1.23.2'

      # Step 3: Run the 'TestFixedInput' and save the output in 'reports/'
      - name: Run TestFixedInput
        run: |
          mkdir -p reports  # Ensure 'reports/' directory exists
          # Run the fixed input test and save the output to a report file
          go test -v -run '^TestFixedInput$' -coverprofile=reports/fixed_input_cover.out > reports/fixed_input_report.txt

      # Step 4: Upload the report for the fixed input test as an artifact
      - name: Upload Fixed Input Test Report
        if: always()  
        uses: actions/upload-artifact@v4
        with:
          name: fixed-input-test-report
          path: |
            reports/fixed_input_report.txt
            reports/fixed_input_cover.out
    
  aggregate:
    needs: [test-fuzz, test-fixed-input]  # Wait for both jobs to complete
    runs-on: ubuntu-latest

    steps:
      # Step 1: Download all reports
      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          path: ./reports  # Artifacts will be downloaded into this folder

      # Step 2: Move all report files from subdirectories into 'reports'
      - name: Move report files
        run: |
            find ./reports -type f -name '*.txt' -exec mv {} ./reports/ \;

      # Step 3: Aggregate all reports into one file
      - name: Aggregate reports
        run: |
            cat ./reports/*.txt > aggregated_report.txt
            echo "Aggregated report generated."

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.2'

      # Step 3: Aggregate all coverage into one file then produce html
      - name: Aggregate coverage
        run: |
            go install github.com/wadey/gocovmerge@latest
            gocovmerge ./reports/*.out > aggregated_cover.out
            go tool cover -html aggregated_cover.out -o aggregated_cover.html
            echo "Aggregated coverage generated."

      # Step 4: Upload the aggregated report
      - name: Upload aggregated report
        uses: actions/upload-artifact@v4
        with:
          name: aggregated-fuzz-report
          path: |
            aggregated_report.txt
            aggregated_cover.out
            aggregated_cover.html
